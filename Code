import sqlite3
from tkinter import *
from tkinter import messagebox
#miConexion=sqlite3.connect("Base de pruebas para una practica guiada")
#miCursor=miConexion.cursor()
#Operaciones tipo CRUD para 
#------------------READ-------------------------------
#miCursor.execute("SELECT * FROM PRODUCTOS WHERE PRECIO = 20")
#valor=miCursor.fetchall()
#print(valor)

#----------------Modificar (UODATE)-------------------------------
#miCursor.execute("UPDATE PRODUCTOS SET PRECIO=32 WHERE NOMBRE_ARTICULO='pelota'")


#----------------Borrar   DELETE--------------------------------
#miCursor.execute("DELETE FROM PRODUCTOS WHERE NOMBRE_ARTICULO='jarron'")
#Tener mucho cuidado con los respaldos de los datos 

#miConexion.commit()
#miConexion.close()


#--------------------Funciones--------------------------------

def conexionBBDD():
	miConexion=sqlite3.connect("Usuarios")
	miCursor=miConexion.cursor()
	#mensaje de papra cuando la inerfaz ya haya sido  creada 
	try:
		miCursor.execute('''
			CREATE TABLE DATOSUSUARIOS(
			ID INTEGER PRIMARY KEY AUTOINCREMENT,
			NOMBRE_USUARIO VARCHAR(50),
			APELLIDOS VARCHAR(50),
			PASSWORD VARCHAR(10),
			DIRECCION VARCHAR(50),
			COMENTARIOS VARCHAR(100))
			''')
		messagebox.showinfo("BBDD","BBDD creada con exito")
	except:
		messagebox.showinfo("!Warning","BBDD creada ya existe ")
def leer():
	miConexion=sqlite3.connect("Usuarios")
	miCursor=miConexion.cursor()
	miCursor.execute("SELECT * FROM DATOSUSUARIOS WHERE ID = "+miId.get())
	elUsuario=miCursor.fetchall()
	for usuario in elUsuario:
		miId.set(usuario[0])
		miNombre.set(usuario[1])
		miPassword.set(usuario[2])
		miApellido.set(usuario[3])
		miDireccion.set(usuario[4])
		textoComentario.insert(1.0,usuario[5])
	miConexion.commit() 

def eliminar():
	miConexion=sqlite3.connect("Usuarios")
	miCursor=miConexion.cursor()
	miCursor.execute("DELETE FROM DATOSUSUARIOS WHERE ID=" + str(miId.get()))
	miConexion.commit()
	messagebox.showinfo("BBDD","Registro borrado con exito")
def actualizar():
	miConexion=sqlite3.connect("Usuarios")
	miCursor=miConexion.cursor()
	#datos=miNombre.get(),miPassword.get(),miApellido.get(),miDireccion.get(),textoComentario.get("1.0",END)
	miCursor.execute("UPDATE DATOSUSUARIOS SET NOMBRE_USUARIO='" + miNombre.get()+"', PASSWORD='" + miPassword.get() +"', APELLIDOS='" + miApellido.get() + "', DIRECCION='" + miDireccion.get() + "', COMENTARIOS='" + textoComentario.get("1.0",END) + "'WHERE ID="+miId.get())
	#-----------------------------------------Query Parametrizada----------------------------------------------------------
	miConexion.commit()
	messagebox.showinfo("BBDD","Registro actualizado con exito")
def salirAplicacion():
	valor=messagebox.askquestion("Salir","Deseas salir de la aplicacion?")
	if(valor=="yes"):
		root.destroy()
def limpiarCampos():
	miNombre.set("")
	miApellido.set("")
	miDireccion.set("")
	miId.set("")
	miPassword.set("")
	textoComentario.delete(1.0,END)
def crear():
	miConexion=sqlite3.connect("Usuarios")
	miCursor=miConexion.cursor()
	#miCursor.execute("INSERT INTO DATOSUSUARIOS VALUES(NULL,'" + miNombre.get()+"','" + miPassword.get() +"','" + miApellido.get() + "','" + miDireccion.get() + "','" + textoComentario.get("1.0",END) + "')")
	datos=miNombre.get(),miPassword.get(),miApellido.get(),miDireccion.get(),textoComentario.get("1.0",END)
	miCursor.execute("INSERT INTO DATOSUSUARIOS VALUES(NULL,?,?,?,?,?)",(datos))
	miConexion.commit()
	messagebox.showinfo("BBDD","Registro insertado con exito")

root=Tk()
#baras de opciones el la aplicaci[on]
barramenu=Menu(root)
root.config(menu=barramenu,width=300,height=300)
root.title("App tipo CRUD")

bbddMenu=Menu(barramenu,tearoff=0)
bbddMenu.add_command(label="Conectar",command=lambda:conexionBBDD())
bbddMenu.add_command(label="Salir",command=lambda:salirAplicacion())


borraMenu=Menu(barramenu,tearoff=0)
borraMenu.add_command(label="Borrar campos",command=lambda:limpiarCampos())

crudMenu=Menu(barramenu,tearoff=0)
crudMenu.add_command(label="Crear",command=lambda:crear())
crudMenu.add_command(label="Leer",command=lambda:leer())
crudMenu.add_command(label="Cargar",command=lambda:actualizar())
crudMenu.add_command(label="Borrar",command=lambda:eliminar())

ayudaMenu=Menu(barramenu,tearoff=0)
ayudaMenu.add_command(label="Licencia")
ayudaMenu.add_command(label="Acerca de ...")

barramenu.add_cascade(label="BBDD",menu=bbddMenu)
barramenu.add_cascade(label="Borrar",menu=borraMenu)
barramenu.add_cascade(label="CRUD",menu=crudMenu)
barramenu.add_cascade(label="Ayuda",menu=ayudaMenu )

#-----------------elementos de la zona Inferio------------------------------

miFrame=Frame(root)
miFrame.pack()
miId=StringVar()
miNombre=StringVar()
miApellido=StringVar()
miPassword=StringVar()
miDireccion=StringVar()


cuadroID=Entry(miFrame,text=miId)
cuadroID.grid(row=0,column=1,padx=10,pady=10)

cuadroNombre=Entry(miFrame,text=miNombre)
cuadroNombre.grid(row=1,column=1,padx=10,pady=10)
cuadroNombre.config(fg="red",justify="right")

cuadroPass=Entry(miFrame,text=miPassword)
cuadroPass.grid(row=2,column=1,padx=10,pady=10)
cuadroPass.config(show="*")

cuadroApellido=Entry(miFrame,text=miApellido)
cuadroApellido.grid(row=3,column=1,padx=10,pady=10)
#cuadroApellido.config(fg="red",justify="right")

cuadroDireccion=Entry(miFrame,text=miDireccion)
cuadroDireccion.grid(row=4,column=1,padx=10,pady=10)
#cuadroNOMBRE.config(fg="red",justify="right")

textoComentario=Text(miFrame,width=16,height=5)
textoComentario.grid(row=5,column=1,padx=10,pady=10)
scrollVert=Scrollbar(miFrame,command=textoComentario.yview)
scrollVert.grid(row=5,column=2,sticky="nsew")
textoComentario.config(yscrollcommand=scrollVert.set)
#--------------------Labels---------------------------------------
idLabel=Label(miFrame,text="ID:")
idLabel.grid(row=0,column=0,sticky="e",padx=10,pady=10)

nombreLabel=Label(miFrame,text="Nombre:")
nombreLabel.grid(row=1,column=0,sticky="e",padx=10,pady=10)

passLabel=Label(miFrame,text="Password:")
passLabel.grid(row=2,column=0,sticky="e",padx=10,pady=10)

apellidoLabel=Label(miFrame,text="Apellido:")
apellidoLabel.grid(row=3,column=0,sticky="e",padx=10,pady=10)

direccionLabel=Label(miFrame,text="Direccion:")
direccionLabel.grid(row=4,column=0,sticky="e",padx=10,pady=10)

comentarioLabel=Label(miFrame,text="Comentario:")
comentarioLabel.grid(row=5,column=0,sticky="e",padx=10,pady=10)


#-------------------Los botones se crean empaquetando todo --------------
miFrame2=Frame(root)
miFrame2.pack()

botonCrear=Button(miFrame2,text="Create",command=lambda:crear())
botonCrear.grid(row=1,column=0,sticky="e",padx=10,pady=10)

botonLeer=Button(miFrame2,text="Read",command=lambda:leer())
botonLeer.grid(row=1,column=2,sticky="e",padx=10,pady=10)

botonCargar=Button(miFrame2,text="Update",command=lambda:actualizar())
botonCargar.grid(row=1,column=3,sticky="e",padx=10,pady=10)

botonBorrar=Button(miFrame2,text="Delete",command=lambda:eliminar())
botonBorrar.grid(row=1,column=4,sticky="e",padx=10,pady=10)


root.mainloop()
